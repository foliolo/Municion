plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id "org.jetbrains.kotlin.android"
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'com.google.firebase.crashlytics'
    id 'com.google.gms.google-services'
}

//// Create a variable called keystorePropertiesFile, and initialize it to your
//// keystore.properties file, in the rootProject folder .
//def keystorePropertiesFile = rootProject.file("keystore.properties")
//
//// Initialize a new Properties() object called keystoreProperties.
//def keystoreProperties = new Properties()
//
//// Load your keystore.properties file into the keystoreProperties object.
//keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//
//android.signingConfigs {
//    config {
//        keyAlias keystoreProperties['keyAlias']
//        keyPassword keystoreProperties['keyPassword']
//        storeFile file(keystoreProperties['storeFile'])
//        storePassword keystoreProperties['storePassword']
//    }
//}

android {
    namespace = "al.ahgitdevelopment.municion"
    compileSdk 34
    buildToolsVersion = '34.0.0'

    defaultConfig {
        applicationId "al.ahgitdevelopment.municion"
        minSdkVersion 26
        targetSdkVersion 34
        versionCode 12
        versionName '0.4.2'
        testInstrumentationRunner "al.ahgitdevelopment.municion.MyTestRunner"

        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
//                        "room.schemaLocation":"$projectDir/schemas".toString(),
"room.incremental"     : "true",
"room.expandProjection": "true"]
            }
        }
    }

    android {
        sourceSets {
            String sharedTestDir = 'src/sharedTest/java'
            test {
                java.srcDirs += sharedTestDir
            }
            androidTest {
                java.srcDirs += sharedTestDir
            }
        }
    }

    buildTypes {
        release {
//            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            minifyEnabled true
            buildConfigField 'String', 'PASSWORD', '""'
        }
        debug {
//            signingConfig signingConfigs.config
            debuggable true
            minifyEnabled false
            buildConfigField 'String', 'PASSWORD', '"123456"'
        }
    }

    flavorDimensions = ["version"]
    productFlavors {
        global {
            dimension "version"
            applicationIdSuffix ".global"
            versionNameSuffix "-global"
        }
//        demo {
//            dimension "version"
//            applicationIdSuffix ".demo"
//            versionNameSuffix "-demo"
//        }
//
//        spain {
//            dimension "version"
//            applicationIdSuffix ""
//            versionNameSuffix "-spain"
//        }
    }

    sourceSets {
        globalDebug {
            res {
                srcDirs 'src/globalDebug/res'
            }
        }
        main {
            res {
                srcDirs 'src/main/res', 'src/main/res/2', 'src/main/resources'
            }
        }
        main.java.srcDirs += 'src/main/kotlin'
    }

    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }

    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    packagingOptions {
        resources {
            excludes += ['**/attach_hotspot_windows.dll', 'META-INF/licenses/ASM', 'META-INF/AL2.0', 'META-INF/LGPL2.1', 'DebugProbesKt.bin']
        }
    }
}

configurations {
    ktlint
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    ktlint "com.pinterest:ktlint:0.49.1"

    // Google
    implementation 'com.google.android.material:material:1.11.0'
    implementation "androidx.collection:collection-ktx:1.3.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'

    implementation "androidx.fragment:fragment-ktx:1.6.2"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.6.2"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.6.2"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"

    // Activity KTX for viewModels()
    implementation "androidx.activity:activity-ktx:1.8.2"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.7.6"
    implementation "androidx.navigation:navigation-ui-ktx:2.7.6"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // Hilt
    implementation "com.google.dagger:hilt-android:2.50"
    kapt "com.google.dagger:hilt-android-compiler:2.50"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.firebaseui:firebase-ui-auth:8.0.2'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-database-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Room components
    implementation "androidx.room:room-ktx:2.6.1"
    implementation "androidx.room:room-runtime:2.6.1"
    kapt "androidx.room:room-compiler:2.6.1"

    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    kapt 'com.github.bumptech.glide:compiler:4.16.0'

}

kapt {
    correctErrorTypes true
}

tasks.register('ktlint', JavaExec) {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

tasks.register('ktlintFormat', JavaExec) {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

//android.applicationVariants.all { variant ->
//    renameAPK(variant)
//
//    // Disable google-services.json parsing for development builds
//    if (variant.flavorName == 'globalTest') {
//        project.tasks.getByName('process' + variant.name.capitalize() + 'GoogleServices').enabled = false
//    }
//}
//
//def renameAPK(variant) {
//    variant.outputs.all {
//        def variantName = variant.name
//        def versionName = variant.versionName
//        def versionCode = variant.versionCode
//        def applicationId = variant.applicationId
//        outputFileName = applicationId + "_" + (variantName != "release" ? variantName + "_" : "") + versionName + "_" + versionCode + ".apk"
//    }
//}
